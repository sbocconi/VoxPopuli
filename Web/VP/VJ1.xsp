<?xml version="1.0"?>
<!DOCTYPE xsp:page [
]>
<xsp:page language="java"
    xmlns:xsp="http://apache.org/xsp"
    xmlns:xsp-request="http://apache.org/xsp/request/2.0"
    xmlns:util="http://apache.org/xsp/util/2.0">

  <xsp:structure>
    <xsp:include>voxpopuli.*</xsp:include>
    <xsp:include>java.io.ByteArrayOutputStream</xsp:include>
  </xsp:structure>

  <xsp:logic>
    DataContainer theDataContainer;
    Outputs P;
    DataBuilder theDataBuilder;
    VPWeb theVPWeb;

  </xsp:logic>

  <page>
    <title lang="44">VOX POPULI for VJ</title>
    <xsp:logic>
      <!-- VARIABLES -->

      <!-- General variables  -->
      String RDFLocation = <xsp-request:get-parameter name="RDFLocation" default="C:/Documents and Settings/sbocconi/.netbeans/5.5/apache-tomcat-5.5.17_base/webapps/cocoon/VP/ns/"/>;
      String repository = <xsp-request:get-parameter name="repository" default="VJ"/>;
      String domainNS = <xsp-request:get-parameter name="domainNS" default="http://www.cwi.nl/~media/ns/VJ/VJ.rdfs#"/>;
      String local = <xsp-request:get-parameter name="local" default="true"/>;
      String curlang = <xsp-request:get-parameter name="curlang" default="44"/>;
      String videolocation = <xsp-request:get-parameter name="videolocation" default="file://C:/Documents and Settings/sbocconi/.netbeans/5.5/apache-tomcat-5.5.17_base/webapps/cocoon/VP/video/"/>;
      String stilllocation = <xsp-request:get-parameter name="stilllocation" default="file://C:/Documents and Settings/sbocconi/.netbeans/5.5/apache-tomcat-5.5.17_base/webapps/cocoon/VP/video/"/>;
      String textlocation = <xsp-request:get-parameter name="textlocation" default="file://C:/Documents and Settings/sbocconi/.netbeans/5.5/apache-tomcat-5.5.17_base/webapps/cocoon/VP/video/"/>;
      String stage = <xsp-request:get-parameter name="stage" default="one"/>;
      String quality = <xsp-request:get-parameter name="quality" default="_100"/>;
      String caption = <xsp-request:get-parameter name="caption" default="on"/>;


      <!-- VJ specific variables  -->
      String arrayindex = <xsp-request:get-parameter name="arrayindex" default="0"/>;
      String index0 = <xsp-request:get-parameter name="index0" default="-1"/>;
      String index1 = <xsp-request:get-parameter name="index1" default="-1"/>;
      String index2 = <xsp-request:get-parameter name="index2" default="-1"/>;

      String[] questions =  request.getParameterValues("question");
      String[] VJs =  request.getParameterValues("VJ");

    </xsp:logic>

    <selected_values>
      <!-- General variables  -->
      <RDFLocation><xsp:expr>RDFLocation</xsp:expr></RDFLocation>
      <repository><xsp:expr>repository</xsp:expr></repository>
      <domainNS><xsp:expr>domainNS</xsp:expr></domainNS>
      <local><xsp:expr>local</xsp:expr></local>
      <curlang><xsp:expr>curlang</xsp:expr></curlang>
      <videolocation><xsp:expr>videolocation</xsp:expr></videolocation>
      <stilllocation><xsp:expr>stilllocation</xsp:expr></stilllocation>
      <stage><xsp:expr>stage</xsp:expr></stage>
      <quality><xsp:expr>quality</xsp:expr></quality>
      <caption><xsp:expr>caption</xsp:expr></caption>

      <!-- VJ specific variables  -->
      <arrayindex><xsp:expr>arrayindex</xsp:expr></arrayindex>
      <index0><xsp:expr>index0</xsp:expr></index0>
      <index1><xsp:expr>index1</xsp:expr></index1>
      <index2><xsp:expr>index2</xsp:expr></index2>

      <xsp:logic>
        if( questions != null ){
        <selectedquestion>true</selectedquestion>
        }
        if( VJs != null ){
        <selectedVJ>true</selectedVJ>
        }
      </xsp:logic>
    </selected_values>

    <xsp:logic>

      try{


      if( theVPWeb == null ){

      theDataContainer = new DataContainer();
      P = new Outputs();
      P.SetOutputStreams( null, null, null, null, null, null, null, System.out, System.out );

      theDataBuilder = new DataBuilder( local, RDFLocation, repository, domainNS, theDataContainer, P );
      theDataBuilder.SetObject( true, false );

      theVPWeb = new VPWeb( P );
      }


      if( !theDataBuilder.ReSetObject(local, RDFLocation, repository, domainNS, true, false) ){
      throw new Exception("Error resetting the object ");
      }

      <questionsList>
        <xsp:logic>

          String[][] Questions = theVPWeb.RetrieveQuestions( theDataContainer, VJs );

          for( int i=0; i&lt;Questions[0].length; i++ ){
          <question>
            <qid>
              <xsp:expr>Questions[0][i]</xsp:expr>
            </qid>
            <qlabel>
              <xsp:expr>Questions[1][i]</xsp:expr>
            </qlabel>
            <xsp:logic>
              if( questions != null ){
              for( int z=0; z&lt;questions.length; z++ ){
              if( questions[z].equals(Questions[0][i]) ){
              <selected>true</selected>
              break;
              }
              }
              }
            </xsp:logic>
          </question>
          }

        </xsp:logic>
      </questionsList>


      <partecipantList>
        <xsp:logic>

          String[][] Partecipants = theVPWeb.RetrieveInterviewees( theDataContainer, questions, null );

          for( int i=0; i&lt;Partecipants[0].length; i++ ){
          <partecipant>
            <pid>
              <xsp:expr>Partecipants[0][i]</xsp:expr>
            </pid>
            <plabel>
              <xsp:expr>Partecipants[1][i]</xsp:expr>
            </plabel>
            <xsp:logic>
              if( VJs != null ){
              for( int z=0; z&lt;VJs.length; z++ ){
              if( VJs[z].equals(Partecipants[0][i]) ){
              <selected>true</selected>
              break;
              }
              }
              }
            </xsp:logic>
          </partecipant>
          }

        </xsp:logic>
      </partecipantList>


      if( stage.equals("two") ){

      String theRules;

      if( ( theRules=theVPWeb.SetRules( questions, VJs) ) == null ){
      throw new Exception("Error creating rules ");

      }

      System.err.println("Script\n" + theRules);

      if( !theDataBuilder.ReSetObject(local, RDFLocation, repository, domainNS, true, false ) ){
      throw new Exception("Error resetting the object ");

      }

      <!---->

      StorySpace theStory = new StorySpace(theDataContainer.Videos, theDataContainer.Audios,
      theDataContainer.Images,theDataContainer.Texts);

      int goodness = 100; <!--u.StrToInt( args[5] );-->

      RuleInstance theRuleInstance = new RuleInstance( theDataContainer, P );

      Parser R = new Parser( theRuleInstance );

      Scheduler theScheduler = new Scheduler(theStory, P, theRuleInstance);

      Module theModule = new Module( theScheduler );

      theScheduler.AddModule( theModule );

      ScriptNode Node = R.ParseRulesString( theRules );

      theModule.AddStartNode( Node );

      theScheduler.InitGoodness( goodness );

      if( theScheduler.RunScheduler() ){
      P.PrintLn(P.ResultOut, "Solution found ");
      } else{
      P.PrintLn(P.ResultOut, "Solution NOT found ");
      }
      ByteArrayOutputStream ba = new ByteArrayOutputStream();

      SMILMedia theSMILMedia = new SMILMedia( quality, videolocation, null, stilllocation, textlocation,
      repository, null, false, ba, true, P );


      try{
      if( theSMILMedia.DoMontage( theStory.GetLastPlot() ) &amp;&amp;
      theSMILMedia.CreateSMILOutput( caption.equals("on") ) ){
      <vpoutput>
        <util:include-expr>
          <util:expr>ba.toString()</util:expr>
        </util:include-expr>
      </vpoutput>

      System.out.println( "Output generated\n" + ba.toString());
      } else{
      System.out.println( "Output NOT generated " );
      }
      }catch ( Exception e ){
      System.out.println( "Output NOT generated " + e.toString() );
      }

      }
      <!---->



      }catch( Exception e ){
      System.out.println( "ERROR: " + e.toString() );
      System.out.println( "Abnormal Program Termination" );
      e.printStackTrace( System.out );
      }

    </xsp:logic>

    <thanks>
      Thanks to mum and daddy
    </thanks>

  </page>
</xsp:page>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("./catalog" "/ufs/media/lib/xml/catalog")
sgml-local-ecat-files:nil
End:
-->
